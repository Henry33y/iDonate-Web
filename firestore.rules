rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Allow users to read and write their own user document
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read eligible donors
    match /users/{userId} {
      allow read: if isAuthenticated() && resource.data.isEligible == true;
    }
    
    // Allow authenticated users to read and write donations
    match /donations/{donationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Rules for institutions collection - Simplified for debugging
    match /institutions/{institutionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAdmin();
    }

    // Rules for admins collection
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if false; // Only allow admin creation through backend
    }

    // Rules for requests collection
    match /requests/{requestId} {
      // Allow authenticated users to read all requests
      allow read: if isAuthenticated();
      
      // Allow users to create their own requests
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      // Allow users to update their own requests
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      // Allow users to delete their own requests if they're still pending
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid && 
                   resource.data.status == 'pending';
      
      // Allow admins to read, update, and delete any request
      allow read, update, delete: if isAdmin();
    }

    // Rules for appointments collection
    match /appointments/{appointmentId} {
      // Allow authenticated users to read appointments they're involved in
      allow read: if isAuthenticated() && 
                  (resource.data.donorId == request.auth.uid || 
                   resource.data.requesterId == request.auth.uid);
      
      // Allow donors to create appointments
      allow create: if isAuthenticated() && 
                   request.resource.data.donorId == request.auth.uid;
      
      // Allow donors to update their own appointments
      allow update: if isAuthenticated() && 
                   resource.data.donorId == request.auth.uid;
      
      // Allow admins to read, update, and delete any appointment
      allow read, update, delete: if isAdmin();
    }
  }
} 